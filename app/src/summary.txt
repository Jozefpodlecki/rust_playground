Blowfish Structure Initialization

The struct Blowfishv2 holds the P-array (bf_p) and four S-boxes (bf_s0 through bf_s3) — these are core components of Blowfish.

The P-array has 18 entries; each S-box has 256 entries.

Key Scheduling (setup_key)

Takes a secret key (max 56 bytes) and initializes the P-array by XORing it with key-derived 32-bit words.

Then runs the key expansion:

Starts with xl = 0, xr = 0.

Encrypts the zero block repeatedly.

Uses the output to replace entries in the P-array and then the S-boxes.

This process mixes the key into the internal state, making the cipher key-dependent.

Block Encryption/Decryption

Encipher / Decipher methods: perform Blowfish’s Feistel network encryption/decryption on two 32-bit halves (xl, xr).

Use P-array entries for XORs and perform 16 rounds of the Blowfish round function.

After rounds, swap halves and XOR final P-array entries.

Round Function

Core of Blowfish encryption.

Takes one half of data and applies a nonlinear function:

Uses the S-boxes indexed by bytes of the other half.

Adds and XORs values to generate a 32-bit output.

This function adds confusion and diffusion, essential for security.

ECB Mode Decryption (decrypt_ecb)

Decrypts the ciphertext in 8-byte blocks (Blowfish block size).

Pads the input to a multiple of 8 bytes if necessary.

For each block, unpacks bytes into two u32 halves (xl, xr), runs decipher, then packs results back.

Returns the decrypted data.

Helper Functions

unpack_block and pack_block convert between byte slices and the two u32 halves, using little-endian byte order.

ByteParts trait allows easy extraction of individual bytes from a u32, ordered MSB to LSB.